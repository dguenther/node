name: Pull Request

on:
  pull_request:
  workflow_dispatch:
  workflow_call:
    inputs:
      push:
        description: Push the images
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  NAMESPACE: ghcr.io/${{ github.repository_owner }}

jobs:
  build:
    strategy:
      matrix:
        client: [geth, nethermind]
        platform: [linux/amd64, linux/arm64]
        include:
          - client: geth
            images: node,node-geth
          # - client: reth
          #   images: node-reth
          - client: nethermind
            images: node-nethermind
          - platform: linux/amd64
            runs-on: ubuntu-24.04
          - platform: linux/arm64
            runs-on: ubuntu-24.04-arm
          # - client: reth
          #   platform: linux/amd64
          #   features: jemalloc,asm-keccak,optimism
          # - client: reth
          #   platform: linux/arm64
          #   features: jemalloc,optimism
          
    runs-on: ${{ matrix.runs-on }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Prepare
        id: prepare
        run: |
          PLATFORM_PAIR=$(echo "${{ matrix.platform }}" | tr '/' '-')
          echo "imageName=${{ matrix.client }}-$PLATFORM_PAIR" >> $GITHUB_OUTPUT
          # Split on commas, prepend the namespace, and rejoin
          echo "namespacedImages=$(echo "${{ matrix.images }}" | sed -e "s/[^,]*/${{ env.NAMESPACE }}\/&/g")" >> $GITHUB_OUTPUT

      - name: Extract metadata for the Docker image
        id: meta
        uses: docker/metadata-action@v5

      - name: Build the Docker image
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ${{ matrix.client }}/Dockerfile
          platforms: ${{ matrix.platform }}
          tags: ${{ steps.prepare.outputs.namespacedImages }}
          labels: ${{ steps.meta.outputs.labels }}
          outputs: ${{ inputs.push && 'type=image,push-by-digest=true,name-canonical=true,push=true' || format('type=docker,dest={0}/{1}.tar', runner.temp, steps.prepare.outputs.imageName) }}
          build-args: |
            FEATURES=${{ matrix.features }}

      - name: Export digest
        if: ${{ inputs.push }}
        run: |
          digest="${{ steps.build.outputs.digest }}"
          touch "${{ runner.temp }}/${digest#sha256:}.digest"
          echo $NAMESPACED_IMAGES >> "${{ runner.temp }}/images"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.prepare.outputs.imageName }}
          path: ${{ runner.temp }}/*
          if-no-files-found: error

  push:
    needs: build
    if: ${{ inputs.push }}
    strategy:
      matrix:
        client: [geth, nethermind]
    runs-on: ubuntu-latest
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          path: ${{ runner.temp }}
          pattern: ${{ matrix.client }}-*
          merge-multiple: true

      - name: Log into the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Prepare variables
        id: prepare
        run: |
          newlineImages=$(cat ${{ runner.temp }}/images | tr ',' '\n')
          echo $newlineImages
          echo "newlineImages=$newlineImages" >> $GITHUB_OUTPUT

      - name: Extract metadata for the Docker image
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ steps.prepare.outputs.newlineImages }}

      - name: Create manifest list and push
        working-directory: ${{ runner.temp }}
        run: |
          echo "${{ steps.prepare.outputs.newlineImages }}" | xargs -I {} \
            docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
              $(printf '{}@sha256:%s ' *.digest)

      - name: Inspect image
        run: |
          echo "${{ steps.prepare.outputs.newlineImages }}" | xargs -I {} \
            docker buildx imagetools inspect {}:${{ steps.meta.outputs.version }}

